(** Representation of tilemap data.

    This module represents the data stored in tilemap files. It handles loading
    of that data from JSON as well as querying the data.*)

type t
(**The abstract type representing tilemap data.*)

val load_map : string -> Tsdl.Sdl.renderer -> t
(**[load_map fl ren] creates a new tilemap representation, with map data from
   the JSON file [fl]. This is done using renderer [ren]. Requires: [fl] is a
   well-formed JSON file generated by Tiled. *)

val draw_map : t -> Tsdl.Sdl.renderer -> Camera.t -> unit
(**[draw_map m ren cam] draws the tilemap [m] onscreen, centered on camera
   [cam], using renderer [ren]. *)

val get_spawn : t -> int * int
(**[get_spawn m] is the coordinates of the spawn point on map [m].*)

val scale : t -> int
(**[scale m] is the ratio of the global tile size that is rendered onscreen and
   the tile size of [m], as in the image file supplying its tile textures.

   Example: If the tile textures for [m] are 16 by 16 pixels and the tiles
   rendered onscreen are 32 by 32 pixels, [scale m] is 2.*)

val get_tile : t -> int * int -> int
(**[get_tile m (x, y)] is the id (represented by an integer) of the tile at
   coordinates [(x, y)] of the map [m]. Requires: [(x, y)] is within bounds for
   the map [m].*)

val get_tileset : t -> Tileset.t
(**[get_tileset m] is the tileset associated with the tilemap [m].*)

val get_dim : t -> int * int
(**[get_dim m] are the number of total pixels taken up by [m], when each tile is
   rendered at a size of [Constants.tilesize].

   Example: [get_dim ex], where [ex] is a map with 20 * 20 tiles would be
   [(640, 640)] when [Constants.tilesize] is set to 32.*)
